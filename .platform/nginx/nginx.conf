user                    nginx; # Nginx가 'nginx' 사용자로 실행
error_log               /var/log/nginx/error.log warn; # warn 레벨의 오류 로그 파일의 위치 지정
pid                     /var/run/nginx.pid; # Nginx 프로세스 PID 파일이 저장될 위치 지정
worker_processes        auto; # Nginx가 CPU 코어 수에 맞춰 자동으로 worker process 설정
worker_rlimit_nofile    33282; # Nginx가 열 수 있는 파일의 최대 개수 지정

events {
    use epoll; # Linux 시스템의 효율적인 네트워크 처리 방식 epoll 사용
    worker_connections  1024; # 각 Nginx worker가 동시에 처리할 수 있는 최대 연결 수
    multi_accept on; # 한 번에 여러 연결을 동시에 처리할 수 있도록 설정
}

http {
    include       /etc/nginx/mime.types; # Nginx 파일 처리 시 MIME 타입을 정의한 파일 포함
    default_type  application/octet-stream; # 기본적으로 파일의 MIME 타입을 application/octet-stream으로 설정

    # 로그 파일에서 사용할 형식 정의 (IP, 요청 정보, 응답 상태)
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    include       conf.d/*.conf;

    map $http_upgrade $connection_upgrade {
        default     "upgrade";
    }

    # 백엔드 서버 정의
    upstream springboot {
        server 127.0.0.1:8080;
        keepalive 1024;
    }

    # HTTP 서버 블록
    server {
        listen        80 default_server; # Nginx가 HTTP 프로토콜로 80포트에서 요청을 수신하도록 설정
        listen        [::]:80 default_server; # IPv6 요청도 수신할 수 있도록 설정

        location / {
            proxy_pass          http://springboot; # 모든 요청을 백엔드 서버(127.0.01:8080)으로 전달

            # 타임아웃 설정 추가
            proxy_read_timeout 5400; # Nginx가 백엔드 서버에서 응답을 기다리는 최대 시간을 1시간 30분으로 설정
            proxy_connect_timeout 5400; # Nginx가 백엔드 서버와 연결을 시도하는 데 걸리는 최대 시간을 1시간 30분으로 설정
            proxy_send_timeout 5400; # Nginx가 백엔드 서버에 요청을 보내는 데 걸리는 최대 시간을 1시간 30분으로 설정

            # OPTIONS 메소드 요청에 대해 CORS 관련 해더를 추가하고, 204 상태 코드 반환
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type';
                add_header 'Access-Control-Allow-Credentials' 'true';
                add_header 'Content-Length' '0';
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                return 204;
            }

            # 모든 요청에 대해 CORS 헤더를 추가하여, 웹 브라우저에서 웹 크로스 도메인 요청 허용
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type';
            add_header 'Access-Control-Allow-Credentials' 'true';

            # 백엔드로 요청을 전달할 때 추가할 HTTP 헤더를 설정
            proxy_http_version  1.1;
            proxy_set_header    Connection          $connection_upgrade;
            proxy_set_header    Upgrade             $http_upgrade;
            proxy_set_header    Host                $host;
            proxy_set_header    X-Real-IP           $remote_addr;
            proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
        }

        access_log    /var/log/nginx/access.log main;

        client_header_timeout 60; # 클라이언트가 Header를 보내는 데 허용되는 최대 시간을 1분으로 설정
        client_body_timeout   60; # 클라이언트가 Body를 보내는 데 허용되는 최대 시간을 1분으로 설정
        keepalive_timeout     60; # Keepalive 연결 대기 시간을 1분으로 설정
        gzip                  off;
        gzip_comp_level       4;

        # Elastic Beanstalk에서 사용하는 healthd.config 설정 파일을 포함한 Health Check 수행
        include conf.d/elasticbeanstalk/healthd.conf;
    }
}
